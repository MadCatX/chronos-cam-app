/*
 * This file was NOT generated by qdbusxml2cpp version 0.7
 * Command line WOULD HAVE BEEN qdbusxml2cpp -p chronosControlInterface control.xml
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is NOT an auto-generated file.
 * Edit this file manually!
 */

#ifndef CHRONOSCONTROLINTERFACE_H_1517442513
#define CHRONOSCONTROLINTERFACE_H_1517442513

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.krontech.chronos.control
 */
class ComKrontechChronosControlInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.krontech.chronos.control"; }

public:
    ComKrontechChronosControlInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);
    ~ComKrontechChronosControlInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QVariantMap> getCameraData()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getCameraData"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> getSensorData()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getSensorData"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> get_timing_limits(const QVariantMap &args)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(args);
        return asyncCallWithArgumentList(QLatin1String("get_timing_limits"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> get_video_settings()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("get_video_settings"), argumentList);
    }

    inline QDBusPendingReply<> set_video_settings(const QVariantMap &data)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(data);
        return asyncCallWithArgumentList(QLatin1String("set_video_settings"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

/*
 * Proxy class for interface org.freedesktop.DBus.Introspectable
 */
class OrgFreedesktopDBusIntrospectableInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.DBus.Introspectable"; }

public:
    OrgFreedesktopDBusIntrospectableInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopDBusIntrospectableInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> Introspect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Introspect"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

/*
 * Proxy class for interface org.freedesktop.DBus.Properties
 */
class OrgFreedesktopDBusPropertiesInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.DBus.Properties"; }

public:
    OrgFreedesktopDBusPropertiesInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopDBusPropertiesInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusVariant> Get(const QString &interface, const QString &propname)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(interface) << qVariantFromValue(propname);
        return asyncCallWithArgumentList(QLatin1String("Get"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> GetAll(const QString &interface)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(interface);
        return asyncCallWithArgumentList(QLatin1String("GetAll"), argumentList);
    }

    inline QDBusPendingReply<> Set(const QString &interface, const QString &propname, const QDBusVariant &value)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(interface) << qVariantFromValue(propname) << qVariantFromValue(value);
        return asyncCallWithArgumentList(QLatin1String("Set"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace krontech {
    namespace chronos {
      typedef ::ComKrontechChronosControlInterface control;
    }
  }
}
namespace org {
  namespace freedesktop {
    namespace DBus {
      typedef ::OrgFreedesktopDBusIntrospectableInterface Introspectable;
      typedef ::OrgFreedesktopDBusPropertiesInterface Properties;
    }
  }
}
#endif
